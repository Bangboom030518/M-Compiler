program = _{ SOI ~ (statement ~ semicolon)* ~ EOI }
    semicolon = _{ ";" }

    statement = { declaration | expression }
        declaration = { import_declaration | variable_declaration }
            import_declaration = ${ import_start ~ namespace_list ~ space ~ from_keyword ~ space ~ string_literal }
                import_start = @{ import_keyword ~ " "}
                namespace_list = ${ (identifier ~ "," ~ WHITESPACE*)* ~ identifier }

            variable_declaration = ${ variable_keyword ~ variable_declaration_body }
                variable_keyword = ${ let_keyword | var_keyword | const_keyword | static_keyword }
                variable_declaration_body = ${ space ~ identifier ~ opt_space ~ variable_initializer }
                    variable_initializer = !{ type_annotation? ~ assignment }

            type_annotation = !{ colon ~ data_type }

            assignment = !{ "=" ~ expression }

        data_type = { identifier }

        expression = { binary_expression | unary_expression | literal | group | identifier }
            unary_expression = { unary_operator ~ expression }
                unary_operator = { bang | negate }
                    bang = { "!" }
                    negate = { "-" }

            group = { "(" ~ expression ~ ")" }

            binary_expression = { binary_term ~ (binary_operator ~ binary_term)+ }
                binary_operator = { plus | divide | minus | modulo | multiply }
                    plus = { "+" }
                    divide = { "/" }
                    minus = { "-" }
                    modulo = { "%" }
                    multiply = { "*" }
                binary_term = { unary_expression | literal | group | identifier }

            literal = { number_literal | string_literal }
                string_literal = ${ "\"" ~ string_content ~ "\"" }
                    string_content = @{ string_char* }
                        string_char = {
                            !("\"" | "\\") ~ ANY
                            | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
                            | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
                        }

                char_literal = ${ "'" ~ string_char ~ "'" }

                boolean_literal = ${ "true" | "false" }
                
                number_literal = @{ (int | float) ~ (^"e" ~ int)? }
                    float = { int ~ ("." ~ ASCII_DIGIT*) }
                    int = { "-"? ~ unsigned }
                    unsigned = _{ nonzero ~ ASCII_DIGIT* }
                    nonzero = _{ '1'..'9' }

        identifier = { !keyword ~ (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) }

keyword = _{ import_keyword | from_keyword | const_keyword | var_keyword | static_keyword | let_keyword }
    import_keyword = { "import" }
    from_keyword = { "from" }
    const_keyword = { "const" }
    var_keyword = { "var" }
    static_keyword = { "static" }
    let_keyword = { "let" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI)) }
space = _{ (COMMENT ~ WHITESPACE*)* ~ WHITESPACE ~ (COMMENT ~ WHITESPACE*)* }
opt_space = _{ WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* }
colon = _{ ":" }
