expression = { binary_expression | unary_expression | literal | group | identifier }
    unary_expression = { unary_operator ~ expression }
        unary_operator = { bang | negate }
            bang = { "!" }
            negate = { "-" }

    group = { "(" ~ expression ~ ")" }

    binary_expression = { binary_term ~ (binary_operator ~ binary_term)* }
        binary_operator = { plus | divide | minus | modulo | multiply }
            plus = { "+" }
            divide = { "/" }
            minus = { "-" }
            modulo = { "%" }
            multiply = { "*" }
        binary_term = { unary_expression | literal | group | identifier }

    literal = { number_literal | string_literal }
        string_literal = ${ "\"" ~ string_content ~ "\"" }
            string_content = @{ string_char* }
                string_char = {
                    !("\"" | "\\") ~ ANY
                    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
                    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
                }
        char_literal = @{ "'" ~ ANY ~ "'" }
        boolean_literal = @{ "true" | "false" }
        number_literal = @{ (int | float) ~ (^"e" ~ int)? }
            float = { int ~ ("." ~ ASCII_DIGIT*) }
            int = { "-"? ~ unsigned }
            unsigned = { nonzero ~ ASCII_DIGIT* }
            nonzero = { '1'..'9' }

identifier = { !keyword ~ (lowercase_identifier | uppercase_identifier) }
    lowercase_identifier = { ASCII_ALPHA_LOWER ~ lowercase_char* }
        lowercase_char = _{ ASCII_ALPHA_LOWER | "_" | ASCII_DIGIT }
    uppercase_identifier = { ASCII_ALPHA_UPPER ~ uppercase_char* }
        uppercase_char = _{ ASCII_ALPHA_UPPER | "_" | ASCII_DIGIT }
    pascal_identifier = { ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }

statement = { import | expression }
    import = @{ "import " ~ namespace_list ~ " from " ~ string_literal }
        namespace_list = { (pascal_identifier ~ ",")* ~ pascal_identifier }
        
program = { SOI ~ (statement ~ ";")* ~ EOI }
keyword = _{ "import" | "from" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ ANY* ~ NEWLINE) }
