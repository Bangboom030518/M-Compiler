program = _{ SOI ~ (statement ~ semicolon)* ~ EOI }
    semicolon = _{ ";" }

    statement = { declaration | expression }
        declaration = { import_declaration }
            import_declaration = ${ import_keyword ~ space ~ namespace_list ~ space ~ from_keyword ~ space ~ string_literal }
                namespace_list = ${ (pascal_identifier ~ "," ~ WHITESPACE*)* ~ pascal_identifier }

            const_declaration = ${ const_keyword ~ space ~ uppercase_identifier ~ assignment }

            assignment = !{ colon ~ data_type ~ "=" ~ expression }

        data_type = { "lolz" }

        expression = { binary_expression | unary_expression | literal | group | identifier }
            unary_expression = { unary_operator ~ expression }
                unary_operator = { bang | negate }
                    bang = { "!" }
                    negate = { "-" }

            group = { "(" ~ expression ~ ")" }

            binary_expression = { binary_term ~ (binary_operator ~ binary_term)* }
                binary_operator = { plus | divide | minus | modulo | multiply }
                    plus = { "+" }
                    divide = { "/" }
                    minus = { "-" }
                    modulo = { "%" }
                    multiply = { "*" }
                binary_term = { unary_expression | literal | group | identifier }

            literal = { number_literal | string_literal }
                string_literal = ${ "\"" ~ string_content ~ "\"" }
                    string_content = @{ string_char* }
                        string_char = {
                            !("\"" | "\\") ~ ANY
                            | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
                            | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
                        }
                // TODO: this needs improving
                char_literal = ${ "'" ~ string_char ~ "'" }

                boolean_literal = ${ "true" | "false" }
                
                number_literal = @{ (int | float) ~ (^"e" ~ int)? }
                    float = { int ~ ("." ~ ASCII_DIGIT*) }
                    int = { "-"? ~ unsigned }
                    unsigned = _{ nonzero ~ ASCII_DIGIT* }
                    nonzero = _{ '1'..'9' }

        identifier = { !keyword ~ (lowercase_identifier | uppercase_identifier) }
            lowercase_identifier = { ASCII_ALPHA_LOWER ~ lowercase_char* }
                lowercase_char = _{ ASCII_ALPHA_LOWER | "_" | ASCII_DIGIT }
            uppercase_identifier = { ASCII_ALPHA_UPPER ~ uppercase_char* }
                uppercase_char = _{ ASCII_ALPHA_UPPER | "_" | ASCII_DIGIT }
            pascal_identifier = { ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }

keyword = _{ import_keyword | from_keyword }
    import_keyword  = { "import" }
    from_keyword = { "from" }
    const_keyword = { "const" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI)) }
space = _{ (COMMENT ~ WHITESPACE*)* ~ WHITESPACE ~ (COMMENT ~ WHITESPACE*)* }
opt_space = _{ WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* }
colon = _{ ":" }
