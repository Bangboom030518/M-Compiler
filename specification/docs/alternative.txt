HttpStatus = enum
    OK
    BAD_REQUEST
    INTERNAL_SERVER_ERROR
    // etc..

    function code (self) UInt16 do
        match self ->
            Self.OK -> 200
            Self.BAD_REQUEST -> 400
            Self.INTERNAL_SERVER_ERROR -> 500

type JsonValue = union
    String      string
    Number      number
    List<Self>  list

    function as_string = (self) String? ->
        let Self.string = self else
            return nil
        string

    function as_list (self) List<Self>? ->
        match self ->
            Self.list -> list
            _ -> nil
sub = (UInt64 a, UInt64 b) UInt64
    @sub(a, b)

function add = (UInt64 a, UInt64 b) UInt64
    @add(a, b)

function less_than = (UInt64 a, UInt64 b) Int8
    @lt(a, b)

type Int32 = @i32
tests
    function json_value () Nil do
        let string = JsonValue.string "Makka Pakka"
        string.as_string()!

implement From<JsonValue> for String
    function from (value) ->
        match value do
            JsonValue.string do string
            JsonValue.number do number
            JsonValue.list   do list.iterator().map(JsonValue.to_string).collect()

From = interface<T>
    function from (T value) Self

Iterator = interface
    type Item

    function next (self) Item?

    function map <F, T> (self, F closure) Map<Self, T>
    where
        F Function<(Self.Item), T>
    do
        Map.new(self, closure)
        

include_string = macro (Literal.String file_path) literal.String do
    import std.IO.*
    let contents = fs.read_to_string(&String.from(file_path))
    contents.into()

std.debug.print("Hello World")

interface 

const HELLO_WORLD = "Hello World!"
let MAGIC_NUMBER = 100

type Vec = struct
    Allocator allocator

interface Iterator =

function add = (Int32 a, Int32 b) !Int32 ->
    asdasd
    asdasd

x.map((a)
    let x = "1"
    String.new(x)
)

x.map($0.a)

const add = struct()

implement Function for add
    const Arguments = ()

    const call = @StaticFunction(Self.Arguments)

Map {
    Nil --> ...
    main --> ...
}

function main = (List<String> arguments) !Nil
    let number = arguments.parse<Int32>()

x: stack_slot<size>
stack_store x i32const(1)

        type A = union {

        }
        
        type Value = { KnownValue | { UnknownI32, UnknownI64 } };
        type UnknownI32 = struct
        

        type A = Int32;
        type Int = { A, Int32, Int64 };
        let a = @assert_type(0, Int64);
        let b = @assert_type(Int::Int64(b), Int);

type Point = struct
    UInt64 x
    UInt64 y

    fn new = (x, y) Self
        { x = 0, y = 0 }
end

fn main = () ()
    let point = { x = 0, y = 0 }
    let point = Point(0, 0)
    let point = Point
        x = 0
        y = 0
    end
end

fn get_base64_from_user() Result<Base64, union { stdin.Error | base64.ParseError }>
    let input = stdin.get_line()?;
    return input.parse()

type Json = union
    | String
    | Number
end

type Json = String | Number    UInt64 x
    UInt64 y
end

type Toml = String | Number
type Data = Json || TomlS

