function u0:0() -> i8 system_v {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 4
    ss2 = explicit_slot 4
    ss3 = explicit_slot 1
    ss4 = explicit_slot 1
    ss5 = explicit_slot 1
    ss6 = explicit_slot 1
    ss7 = explicit_slot 1
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 system_v
    sig1 = () -> i32 system_v
    sig2 = (i64) -> i8 system_v
    fn0 = colocated u0:8 sig0
    fn1 = colocated u0:9 sig1
    fn2 = colocated u0:10 sig2

block0:
    v0 = symbol_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    v4 = call fn1()
    v22 = stack_addr.i64 ss1
    store notrap v4, v22
    v5 = stack_addr.i64 ss1
    v6 = load.i32 v5
    v7 = iconst.i32 100
    v23 = stack_addr.i64 ss2
    store notrap v7, v23  ; v7 = 100
    v8 = stack_addr.i64 ss2
    v9 = load.i32 v8
    v10 = icmp eq v6, v9
    v24 = stack_addr.i64 ss3
    store notrap v10, v24
    v11 = stack_addr.i64 ss3
    v12 = load.i8 v11
    brif v12, block1, block2

block1:
    v13 = iconst.i8 1
    v25 = stack_addr.i64 ss4
    store notrap v13, v25  ; v13 = 1
    v14 = stack_addr.i64 ss4
    jump block3(v14)

block2:
    v15 = call fn2(v2)
    v26 = stack_addr.i64 ss5
    store notrap v15, v26
    v16 = stack_addr.i64 ss5
    v17 = iconst.i8 2
    v27 = stack_addr.i64 ss6
    store notrap v17, v27  ; v17 = 2
    v18 = stack_addr.i64 ss6
    jump block3(v18)

block3(v3: i64):
    v19 = iconst.i8 0
    v28 = stack_addr.i64 ss7
    store notrap v19, v28  ; v19 = 0
    v20 = stack_addr.i64 ss7
    v21 = load.i8 v20
    return v21
}
function u0:0(i64) -> i8 system_v {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 1
    sig0 = (i64, i64) -> i8 system_v
    fn0 = u0:4 sig0

block0(v0: i64):
    v1 = iconst.i64 8
    v2 = iadd v0, v1  ; v1 = 8
    v3 = load.i64 v2
    v4 = iconst.i64 0
    v5 = iadd v0, v4  ; v4 = 0
    v6 = load.i64 v5
    v7 = call fn0(v3, v6)
    v12 = stack_addr.i64 ss0
    store notrap v7, v12
    v8 = stack_addr.i64 ss0
    v9 = iconst.i8 0
    v13 = stack_addr.i64 ss1
    store notrap v9, v13  ; v9 = 0
    v10 = stack_addr.i64 ss1
    v11 = load.i8 v10
    return v11
}
function u0:0() -> i32 system_v {
    ss0 = explicit_slot 4

block0:
    v0 = iconst.i32 42
    v3 = stack_addr.i64 ss0
    store notrap v0, v3  ; v0 = 42
    v1 = stack_addr.i64 ss0
    v2 = load.i32 v1
    return v2
}
function u0:0(i64, i64) -> i64 system_v {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 8
    ss2 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 system_v
    sig1 = (i64, i64, i64) -> i64 system_v
    sig2 = (i64, i64, i64) -> i64 system_v
    fn0 = %Memmove sig0
    fn1 = %Memmove sig1
    fn2 = %Memcpy sig2

block0(v0: i64, v1: i64):
    v2 = stack_addr.i64 ss0
    v3 = iconst.i64 8
    v14 = iconst.i64 8
    v4 = iadd v2, v14  ; v14 = 8
    v15 = stack_addr.i64 ss1
    store notrap v0, v15
    v5 = stack_addr.i64 ss1
    v6 = call fn0(v4, v5, v3)  ; v3 = 8
    v7 = iconst.i64 8
    v16 = iconst.i64 0
    v8 = iadd v2, v16  ; v16 = 0
    v9 = iconst.i64 4
    v17 = stack_addr.i64 ss2
    store notrap v9, v17  ; v9 = 4
    v10 = stack_addr.i64 ss2
    v11 = call fn1(v8, v10, v7)  ; v7 = 8
    v12 = iconst.i64 16
    v13 = call fn2(v1, v2, v12)  ; v12 = 16
    return v1
}
