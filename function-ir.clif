function u0:0(i64) -> i8 windows_fastcall {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 1
    sig0 = (i64) -> i8 windows_fastcall
    fn0 = u0:5 sig0

block0(v0: i64):
    v1 = iconst.i64 0
    v2 = iadd v0, v1  ; v1 = 0
    v3 = load.i64 v2
    v4 = call fn0(v3)
    v9 = stack_addr.i64 ss0
    store notrap v4, v9
    v5 = stack_addr.i64 ss0
    v6 = iconst.i8 0
    v10 = stack_addr.i64 ss1
    store notrap v6, v10  ; v6 = 0
    v7 = stack_addr.i64 ss1
    v8 = load.i8 v7
    return v8
}
function u0:0(i64) -> i64 windows_fastcall {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 8
    ss2 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64, i64) -> i64 windows_fastcall
    fn0 = %Memmove sig0
    fn1 = %Memmove sig1

block0(v0: i64):
    v1 = symbol_value.i64 gv0
    v2 = stack_addr.i64 ss0
    v3 = iconst.i64 8
    v12 = iconst.i64 0
    v4 = iadd v2, v12  ; v12 = 0
    v13 = stack_addr.i64 ss1
    store notrap v1, v13
    v5 = stack_addr.i64 ss1
    v6 = call fn0(v4, v5, v3)  ; v3 = 8
    v7 = iconst.i64 8
    v14 = iconst.i64 8
    v8 = iadd v2, v14  ; v14 = 8
    v9 = iconst.i64 4
    v15 = stack_addr.i64 ss2
    store notrap v9, v15  ; v9 = 4
    v10 = stack_addr.i64 ss2
    v11 = call fn1(v8, v10, v7)  ; v7 = 8
    return v2
}
function u0:0(i8, i8) -> i8 windows_fastcall {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 1
    ss2 = explicit_slot 1

block0(v0: i8, v1: i8):
    v9 = stack_addr.i64 ss0
    store notrap v0, v9
    v2 = stack_addr.i64 ss0
    v10 = stack_addr.i64 ss1
    store notrap v1, v10
    v3 = stack_addr.i64 ss1
    v4 = load.i8 v2
    v5 = load.i8 v3
    v6 = iadd v4, v5
    v11 = stack_addr.i64 ss2
    store notrap v6, v11
    v7 = stack_addr.i64 ss2
    v8 = load.i8 v7
    return v8
}
