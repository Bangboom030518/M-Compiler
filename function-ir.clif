function u0:0(i64, i64) -> i64 windows_fastcall {
    ss0 = explicit_slot 8
    ss1 = explicit_slot 8
    ss2 = explicit_slot 8

block0(v0: i64, v1: i64):
    v9 = stack_addr.i64 ss0
    store notrap v0, v9
    v2 = stack_addr.i64 ss0
    v10 = stack_addr.i64 ss1
    store notrap v1, v10
    v3 = stack_addr.i64 ss1
    v4 = load.i64 v2
    v5 = load.i64 v3
    v6 = isub v4, v5
    v11 = stack_addr.i64 ss2
    store notrap v6, v11
    v7 = stack_addr.i64 ss2
    v8 = load.i64 v7
    return v8
}
function u0:0(i64, i64) -> i64 windows_fastcall {
    ss0 = explicit_slot 8
    ss1 = explicit_slot 8
    ss2 = explicit_slot 16
    ss3 = explicit_slot 16
    ss4 = explicit_slot 8
    ss5 = explicit_slot 8
    ss6 = explicit_slot 8
    ss7 = explicit_slot 8
    ss8 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64, i64) -> i64 windows_fastcall
    sig2 = (i64) -> i64 windows_fastcall
    sig3 = (i64, i64, i64) -> i64 windows_fastcall
    sig4 = (i64, i64) -> i64 windows_fastcall
    sig5 = (i64, i64, i64) -> i64 windows_fastcall
    sig6 = (i64, i64, i64) -> i64 windows_fastcall
    sig7 = (i64) -> i64 windows_fastcall
    fn0 = %Memmove sig0
    fn1 = %Memmove sig1
    fn2 = colocated u0:0 sig2
    fn3 = %Memmove sig3
    fn4 = colocated u0:5 sig4
    fn5 = %Memmove sig5
    fn6 = %Memmove sig6
    fn7 = colocated u0:2 sig7

block0(v0: i64, v1: i64):
    v39 = stack_addr.i64 ss0
    store notrap v0, v39
    v2 = stack_addr.i64 ss0
    v40 = stack_addr.i64 ss1
    store notrap v1, v40
    v3 = stack_addr.i64 ss1
    v4 = stack_addr.i64 ss2
    v5 = iconst.i64 8
    v41 = iconst.i64 0
    v6 = iadd v4, v41  ; v41 = 0
    v7 = call fn0(v6, v2, v5)  ; v5 = 8
    v8 = iconst.i64 8
    v42 = iconst.i64 8
    v9 = iadd v4, v42  ; v42 = 8
    v10 = call fn1(v9, v3, v8)  ; v8 = 8
    v11 = iconst.i64 16
    v12 = stack_addr.i64 ss3
    v13 = iconst.i64 8
    v43 = iconst.i64 0
    v14 = iadd v12, v43  ; v43 = 0
    v15 = iconst.i64 10
    v44 = stack_addr.i64 ss4
    store notrap v15, v44  ; v15 = 10
    v16 = stack_addr.i64 ss4
    v17 = load.i64 v16
    v18 = call fn2(v17)
    v45 = stack_addr.i64 ss5
    store notrap v18, v45
    v19 = stack_addr.i64 ss5
    v20 = call fn3(v14, v19, v13)  ; v13 = 8
    v21 = iconst.i64 8
    v46 = iconst.i64 8
    v22 = iadd v12, v46  ; v46 = 8
    v23 = iconst.i64 8
    v24 = iadd v4, v23  ; v23 = 8
    v25 = load.i64 v24
    v26 = iconst.i64 1
    v47 = stack_addr.i64 ss6
    store notrap v26, v47  ; v26 = 1
    v27 = stack_addr.i64 ss6
    v28 = load.i64 v27
    v29 = call fn4(v25, v28)
    v48 = stack_addr.i64 ss7
    store notrap v29, v48
    v30 = stack_addr.i64 ss7
    v31 = call fn5(v22, v30, v21)  ; v21 = 8
    v32 = call fn6(v4, v12, v11)  ; v11 = 16
    v33 = load.i64 v4
    v34 = call fn7(v33)
    v49 = stack_addr.i64 ss8
    store notrap v34, v49
    v35 = stack_addr.i64 ss8
    v36 = iconst.i64 0
    v37 = iadd v4, v36  ; v36 = 0
    v38 = load.i64 v37
    return v38
}
