function u0:0() -> i8 windows_fastcall {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 1
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i8 windows_fastcall
    fn0 = u0:2 sig0

block0:
    v0 = symbol_value.i64 gv0
    v1 = call fn0(v0)
    v6 = stack_addr.i64 ss0
    store notrap v1, v6
    v2 = stack_addr.i64 ss0
    v3 = iconst.i8 0
    v7 = stack_addr.i64 ss1
    store notrap v3, v7  ; v3 = 0
    v4 = stack_addr.i64 ss1
    v5 = load.i8 v4
    return v5
}
function u0:0(i64) -> i8 windows_fastcall {
    ss0 = explicit_slot 3
    ss1 = explicit_slot 1
    ss2 = explicit_slot 1
    ss3 = explicit_slot 1
    ss4 = explicit_slot 1
    ss5 = explicit_slot 1
    sig0 = (i64, i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64, i64) -> i64 windows_fastcall
    sig2 = (i64, i64, i64) -> i64 windows_fastcall
    sig3 = () -> i8 windows_fastcall
    fn0 = %Memmove sig0
    fn1 = %Memmove sig1
    fn2 = %Memmove sig2
    fn3 = colocated u0:0 sig3

block0(v0: i64):
    v1 = stack_addr.i64 ss0
    v2 = iconst.i64 1
    v22 = iconst.i64 0
    v3 = iadd v1, v22  ; v22 = 0
    v4 = iconst.i8 72
    v23 = stack_addr.i64 ss1
    store notrap v4, v23  ; v4 = 72
    v5 = stack_addr.i64 ss1
    v6 = call fn0(v3, v5, v2)  ; v2 = 1
    v7 = iconst.i64 1
    v24 = iconst.i64 1
    v8 = iadd v1, v24  ; v24 = 1
    v9 = iconst.i8 105
    v25 = stack_addr.i64 ss2
    store notrap v9, v25  ; v9 = 105
    v10 = stack_addr.i64 ss2
    v11 = call fn1(v8, v10, v7)  ; v7 = 1
    v12 = iconst.i64 1
    v26 = iconst.i64 2
    v13 = iadd v1, v26  ; v26 = 2
    v14 = iconst.i8 0
    v27 = stack_addr.i64 ss3
    store notrap v14, v27  ; v14 = 0
    v15 = stack_addr.i64 ss3
    v16 = call fn2(v13, v15, v12)  ; v12 = 1
    v17 = call fn3()
    v28 = stack_addr.i64 ss4
    store notrap v17, v28
    v18 = stack_addr.i64 ss4
    v19 = iconst.i8 0
    v29 = stack_addr.i64 ss5
    store notrap v19, v29  ; v19 = 0
    v20 = stack_addr.i64 ss5
    v21 = load.i8 v20
    return v21
}
